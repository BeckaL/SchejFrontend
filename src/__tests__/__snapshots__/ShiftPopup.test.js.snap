// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Shift Popup it matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ShiftPopup
    shiftInfo={
      Object {
        "end": Object {
          "toLocaleString": [Function],
        },
        "start": Object {
          "toLocaleString": [Function],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="popup-title"
        >
          Shift Information
        </h3>,
        <div
          className="shift-info"
        >
          <p
            className="shift-info-label"
          >
            Employee name:
          </p>
          <p
            className="shift-info-entry"
          />
        </div>,
        <br />,
        <div
          className="shift-info"
        >
          <p
            className="shift-info-label"
          >
            Contact email address:
          </p>
          <p
            className="shift-info-entry"
          />
        </div>,
        <br />,
        <div
          className="shift-info"
        >
          <p
            className="shift-info-label"
          >
            Start time:
          </p>
          <p
            className="shift-info-entry"
          />
        </div>,
        <br />,
        <div
          className="shift-info"
        >
          <p
            className="shift-info-label"
          >
            End time:
          </p>
          <p
            className="shift-info-entry"
          />
        </div>,
        <br />,
        <section
          id="toggle-popup-state"
        >
          <button
            className="custom-button"
            id="toggle-popup-content"
            onClick={[Function]}
          >
            Request shift swap
          </button>
        </section>,
      ],
      "id": "shift-popup",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Shift Information",
          "className": "popup-title",
        },
        "ref": null,
        "rendered": "Shift Information",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="shift-info-label"
            >
              Employee name:
            </p>,
            <p
              className="shift-info-entry"
            />,
          ],
          "className": "shift-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Employee name:",
              "className": "shift-info-label",
            },
            "ref": null,
            "rendered": "Employee name:",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "shift-info-entry",
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="shift-info-label"
            >
              Contact email address:
            </p>,
            <p
              className="shift-info-entry"
            />,
          ],
          "className": "shift-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Contact email address:",
              "className": "shift-info-label",
            },
            "ref": null,
            "rendered": "Contact email address:",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "shift-info-entry",
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="shift-info-label"
            >
              Start time:
            </p>,
            <p
              className="shift-info-entry"
            />,
          ],
          "className": "shift-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Start time:",
              "className": "shift-info-label",
            },
            "ref": null,
            "rendered": "Start time:",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "shift-info-entry",
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="shift-info-label"
            >
              End time:
            </p>,
            <p
              className="shift-info-entry"
            />,
          ],
          "className": "shift-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "End time:",
              "className": "shift-info-label",
            },
            "ref": null,
            "rendered": "End time:",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "shift-info-entry",
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            className="custom-button"
            id="toggle-popup-content"
            onClick={[Function]}
          >
            Request shift swap
          </button>,
          "id": "toggle-popup-state",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Request shift swap",
            "className": "custom-button",
            "id": "toggle-popup-content",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Request shift swap",
          "type": "button",
        },
        "type": "section",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="popup-title"
          >
            Shift Information
          </h3>,
          <div
            className="shift-info"
          >
            <p
              className="shift-info-label"
            >
              Employee name:
            </p>
            <p
              className="shift-info-entry"
            />
          </div>,
          <br />,
          <div
            className="shift-info"
          >
            <p
              className="shift-info-label"
            >
              Contact email address:
            </p>
            <p
              className="shift-info-entry"
            />
          </div>,
          <br />,
          <div
            className="shift-info"
          >
            <p
              className="shift-info-label"
            >
              Start time:
            </p>
            <p
              className="shift-info-entry"
            />
          </div>,
          <br />,
          <div
            className="shift-info"
          >
            <p
              className="shift-info-label"
            >
              End time:
            </p>
            <p
              className="shift-info-entry"
            />
          </div>,
          <br />,
          <section
            id="toggle-popup-state"
          >
            <button
              className="custom-button"
              id="toggle-popup-content"
              onClick={[Function]}
            >
              Request shift swap
            </button>
          </section>,
        ],
        "id": "shift-popup",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Shift Information",
            "className": "popup-title",
          },
          "ref": null,
          "rendered": "Shift Information",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="shift-info-label"
              >
                Employee name:
              </p>,
              <p
                className="shift-info-entry"
              />,
            ],
            "className": "shift-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Employee name:",
                "className": "shift-info-label",
              },
              "ref": null,
              "rendered": "Employee name:",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "shift-info-entry",
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="shift-info-label"
              >
                Contact email address:
              </p>,
              <p
                className="shift-info-entry"
              />,
            ],
            "className": "shift-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Contact email address:",
                "className": "shift-info-label",
              },
              "ref": null,
              "rendered": "Contact email address:",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "shift-info-entry",
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="shift-info-label"
              >
                Start time:
              </p>,
              <p
                className="shift-info-entry"
              />,
            ],
            "className": "shift-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Start time:",
                "className": "shift-info-label",
              },
              "ref": null,
              "rendered": "Start time:",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "shift-info-entry",
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="shift-info-label"
              >
                End time:
              </p>,
              <p
                className="shift-info-entry"
              />,
            ],
            "className": "shift-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "End time:",
                "className": "shift-info-label",
              },
              "ref": null,
              "rendered": "End time:",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "shift-info-entry",
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              className="custom-button"
              id="toggle-popup-content"
              onClick={[Function]}
            >
              Request shift swap
            </button>,
            "id": "toggle-popup-state",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Request shift swap",
              "className": "custom-button",
              "id": "toggle-popup-content",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Request shift swap",
            "type": "button",
          },
          "type": "section",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
